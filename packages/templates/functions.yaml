
################################################################################
## cr.list_packages_with_deps ###
################################################################################

{{- define "cr.list_packages_with_deps" }}

  {{- if not ( default .skip false ) }}

    {{- $packages := list }}

    {{- $dep := . }}

    {{- range ( "requires prerequires optrequires" | splitList " " ) }}
      {{- if ( index $dep . ) }}
        {{- range ( index $dep . ) }}

          {{- range ( include "cr.list_packages_with_deps" . ) | splitList " " }}
            {{- if not ( has . $packages ) }}
              {{- $packages = . | append $packages }}
            {{- end }}
          {{- end }}

        {{- end }}
      {{- end }}
    {{- end }}

    {{- range ( "prereqs preemerge" | splitList " " ) }}
      {{- if ( index $dep . ) }}
        {{- range ( index $dep . ) }}

          {{- $required := printf "\"%s\"" . }}
          
          {{- if not ( has $required $packages ) }}
            {{- $packages = $required | append $packages }}
          {{- end }}

        {{- end }}
      {{- end }}
    {{- end }}

    {{- $package := printf "\"%s-%s\"" .category .name }}
    {{- if not ( has $package $packages ) }}
      {{- $packages = $package | append $packages }}
    {{- end }}

    {{- /*$packages = $packages | uniq */}}
    {{- join " " $packages }}

  {{- else }}
    {{- "" }}
  {{- end }}

{{- end }}

################################################################################
## cr.map_packages_with_deps ###
################################################################################

{{- define "cr.map_packages_with_deps" }}

  {{- $packages := dict }}
  
  {{- if not ( default .skip false ) }}
  
    {{- $package := . }}
    {{- $requiredBy := printf "%s-%s" .category .name }}
    
    {{- range ( "requires prerequires optrequires" | splitList " " ) }}
      {{- if ( index $package . ) }}
        {{- range ( index $package . ) }}

          {{- $required := printf "%s-%s" .category .name }}

          {{- range $k, $v := ( ( include "cr.map_packages_with_deps" . ) | fromJson ) }}
            {{- $_ := set $packages $k $v }}
          {{- end }}

          {{- if not ( hasKey $packages $required ) }}
            {{- $_ := set $packages $required $requiredBy }}
          {{- end }}

        {{- end }}
      {{- end }}
    {{- end }}

    {{- range ( "prereqs preemerge" | splitList " " ) }}
      {{- if ( index $package . ) }}
        {{- range ( index $package . ) }}
        
          {{- $required := printf "\"%s\"" . }}

          {{- if not ( hasKey $packages $required ) }}
            {{- $_ := set $packages $required $requiredBy }}
          {{- end }}

        {{- end }}
      {{- end }}
    {{- end }}

  {{- end }}
  
  {{- $packages | toJson }}

{{- end }}

################################################################################
## cr.copy_package_setup_files ###
################################################################################

{{- define "cr.copy_package_setup_files" }}
{{- $package := . }}
- |
  set -x; \
  mkdir -p /etc/portage/package.accept_keywords; \
  if [ -e "package.accept_keywords/{{ $package }}.accept_keywords" ]; then \
  cp -rf package.accept_keywords/{{ $package }}.accept_keywords /etc/portage/package.accept_keywords/{{ $package }}.accept_keywords; \
  fi; \
  mkdir -p /etc/portage/package.license; \
  if [ -e "package.license/{{ $package }}.license" ]; then \
  cp -rf package.license/{{ $package }}.license /etc/portage/package.license/{{ $package }}.license; \
  fi; \
  mkdir -p /etc/portage/package.unmask; \
  if [ -e "package.unmask/{{ $package }}.unmask" ]; then \
  cp -rf package.unmask/{{ $package }}.unmask /etc/portage/package.unmask/{{ $package }}.unmask; \
  fi; \
  mkdir -p /etc/portage/package.use; \
  if [ -e "package.use/{{ $package }}.use" ]; then \
  cp -rf package.use/{{ $package }}.use /etc/portage/package.use/{{ $package }}.use; \
  fi;
{{- end }}

################################################################################
## cr.package_setup ###
################################################################################

{{- define "cr.package_setup" }}

{{- include "cr.copy_package_setup_files" ( printf "%s-%s" ( .category | replace "layerbase" "layers" | replace "buildbase" "layers" ) .name ) }}

{{- if .atoms }}

{{- $count := 0 }}
{{- $filepath := "/etc/portage/package" }}
{{- $filename := printf "%s-%s" .category .name }}

{{- range .atoms }}

{{- add1 $count }}

{{- if eq ( mod $count 50 ) 1 }}
- |
  set -x; \
{{- end }}

{{- $atom := . }}
{{- range ( "accept_keywords license use" | splitList " " ) }}
  find {{ $filepath }}.{{ . }}/ -type f -a \( -name "*.{{ . }}" \) -a -exec sed -i -e "/{{ $atom.atom | replace "/" "\\/" }}/d" {} +; \
{{- $value := ( index $atom . ) }}
{{- if $value }}
  mkdir -p {{ $filepath }}.{{ . }}; \
  echo -e "{{ $atom.atom }} {{ $value | replace "\n" "\\n" }}" >> {{ $filepath }}.{{ . }}/{{ $filename }}.{{ . }}; \
{{- end }}
{{- end }}
{{- range ( "unmask" | splitList " " ) }}
{{- if ( index $atom . ) }}
  mkdir -p {{ $filepath }}.{{ . }}; \
  echo -e "{{ $atom.atom }}" >> {{ $filepath }}.{{ . }}/{{ $filename }}.{{ . }}; \
{{- end }}
{{- end }}
{{- $value := ( index $atom "env" ) }}
{{- if $value }}
  mkdir -p /etc/portage/env; \
  echo -e "{{ ( $value | replace "\n" "\\n" | replace "$" "\\$" | replace "\"" "\\\"" ) }}" >> /etc/portage/env/{{ $filename }}.conf; \
  echo -e "{{ $atom.atom }} {{ $filename }}.conf" >> /etc/portage/package.env/{{ $filename }}.env; \
{{- end }}
{{- $value := ( index $atom "env_profile" ) }}
{{- if $value }}
  mkdir -p /etc/portage/env; \
  echo -e "{{ $atom.atom }} {{ $value }}" >> /etc/portage/package.env/{{ $filename }}.env; \
{{- end }}

{{- if eq ( mod $count 50 ) 0 }}
  echo;
{{- end }}

{{- end }}

{{- if ne ( mod $count 50 ) 0 }}
  echo;
{{- end }}

{{- end }}

{{- end }}

################################################################################
## cr.prereqs ###
################################################################################

{{- define "cr.prereqs" }}

{{- $packages := index . 1 }}
{{- $previous_package := index . 2 }}

{{- with index . 0 }}

{{- if not ( default .skip false ) }}

{{- $current_package := printf "%s-%s" .category .name }}

{{- $enqueue := or ( not $previous_package ) ( eq ( get $packages $current_package ) $previous_package ) }}

{{- if $enqueue }}
- echo "cr.prereqs ({{ $current_package }} required by {{ $previous_package | default "itself" }})"
{{- else }}
- echo "cr.prereqs ({{ $current_package }} required by {{ $previous_package | default "itself" }}, skipping, should be required by {{ get $packages $current_package }})"
{{- end }}

{{- if $enqueue }}

{{- $package := . }}

{{- if .requires }}
{{- range .requires }}

{{- include "cr.prereqs_emerge" ( list . $packages $current_package ) }}

{{- end }}
{{- end }}

{{- range ( "prerequires optrequires" | splitList " " ) }}
{{- if ( index $package . ) }}
{{- range ( index $package . ) }}

{{- include "cr.prereqs_emerge" ( list . $packages $current_package ) }}

{{- end }}
{{- end }}
{{- end }}

{{- if .overlays }}
- |
  USE="-subversion -mercurial" emerge app-portage/layman; \
  layman -L;
{{- range .overlays }}
{{- if .url }}
- echo "y" | layman -o {{ .url }} -f -a {{ .name }}
{{- else }}
- echo "y" | layman -a {{ .name }}
{{- end }}
{{- end }}
{{- end }}

{{- if .prepare }}
{{- range .prepare }}
{{- if . }}
{{- include "cr.get_single_or_multi_line_item" . }}
{{- end }}
{{- end }}
{{- end }}

{{- if .prereqs }}
{{- range .prereqs }}
{{- if . }}
{{ include "cr.emerge" . }}
{{- end }}
{{- end }}
{{- end }}

{{- if .ready }}
{{- range .ready }}
{{- if . }}
{{- include "cr.get_single_or_multi_line_item" . }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}

{{- end }}

{{- end }}

{{- end }}

################################################################################
## cr.prereqs_emerge ###
################################################################################

{{- define "cr.prereqs_emerge" }}

{{- $packages := index . 1 }}
{{- $previous_package := index . 2 }}

{{- with index . 0 }}

{{- if not ( default .skip false ) }}

{{- $current_package := printf "%s-%s" .category .name }}

{{- $enqueue := or ( not $previous_package ) ( eq ( get $packages $current_package ) $previous_package ) }}

{{- if $enqueue }}
- echo "cr.prereqs_emerge ({{ $current_package }} required by {{ $previous_package | default "itself" }})"
{{- else }}
- echo "cr.prereqs_emerge ({{ $current_package }} required by {{ $previous_package | default "itself" }}, skipping, should be required by {{ get $packages $current_package }})"
{{- end }}

{{- if $enqueue }}

{{- include "cr.prereqs" ( list . $packages $previous_package ) }}

{{- include "cr.emerge_atom" ( list . $packages $previous_package ) }}

{{- end }}

{{- end }}

{{- end }}

{{- end }}

################################################################################
## cr.emerge_atom ###
################################################################################

{{- define "cr.emerge_atom" }}

{{- $packages := index . 1 }}
{{- $previous_package := index . 2 }}

{{- $layerbase_package_setup_only := false }}
{{- if gt ( len . ) 3 }}
  {{- $layerbase_package_setup_only = index . 3 }}
{{- end }}

{{- with index . 0 }}

{{- if not ( default .skip false ) }}

{{- $current_package := printf "%s-%s" .category .name }}

{{- if .setup }}
{{- range .setup }}
{{- if . }}
{{- include "cr.get_single_or_multi_line_item" . }}
{{- end }}
{{- end }}
{{- end }}

{{- if .preemerge }}
{{- range .preemerge }}
{{- include "cr.emerge" . }}
{{- end }}
{{- end }}

{{- if .labels }}
{{- if ( index .labels "emerge.packages" ) }}

{{- if or ( not $layerbase_package_setup_only ) ( and ( $layerbase_package_setup_only ) ( eq .category "layerbase" ) ) }}
{{- include "cr.package_setup" . }}
{{- end }}

{{- include "cr.emerge" ( index .labels "emerge.packages" ) }}

{{- end }}
{{- end }}

{{ if .unmerge }}
{{ range .unmerge }}
- emerge -C {{ . }}
{{ end }}
{{ end }}
{{ if .etc_update }}
{{ if .etc_update.mode }}
- etc-update -q --automode {{ .etc_update.mode }}
{{ end }}
{{ end }}

{{- if .completion }}
{{- range .completion }}
{{- if . }}
{{- include "cr.get_single_or_multi_line_item" . }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}

{{- end }}

{{- end }}

################################################################################
## cr.emerge ###
################################################################################

{{- define "cr.emerge" }}

{{- $tokens := . | splitList ";" }}
{{- if eq ( len $tokens ) 1 }}
- emerge -1 -j ${JOBS} "{{ ( index $tokens 0 ) | replace " " "\" \"" }}"
{{- else if eq ( len $tokens ) 2 }}
- {{ ( index $tokens 1 ) }} emerge -1 -j ${JOBS} "{{ ( index $tokens 0 ) | replace " " "\" \"" }}"
{{- end }}

{{- end }}

################################################################################
## cr.get_single_or_multi_line_item ###
################################################################################

{{- define "cr.get_single_or_multi_line_item" }}

{{- if contains "\n" . }}
- |
{{ . | indent 2 }}
{{- else }}
- {{ . }}
{{- end }}

{{- end }}

################################################################################
## flatten ###
################################################################################

{{- define "cr.flatten_list" -}}
  {{- $output := list -}}
  {{- range . -}}
    {{- if ( kindIs "slice" . ) -}}
      {{- $output = ( concat $output ( get (fromYaml ( include "cr.flatten_list" . ) )  "list" ) ) -}}
    {{- else -}}
      {{- $output = ( append $output . ) -}}
    {{- end -}}
  {{- end -}}
  {{- toYaml ( dict "list" $output ) -}}
{{- end -}}

{{- define "cr.flatten" -}}
  {{- get ( fromYaml ( include "cr.flatten_list" . ) ) "list" | toYaml }}
{{- end -}}

{{- define "cr.flatten_map" -}}
  {{- $map := first . -}}
  {{- $label := last . -}}
  {{- range $key, $val := $map -}}
    {{- $sublabel := list $label $key | join "_" | upper -}}
    {{- if kindOf $val | eq "map" -}}
      {{- list $val $sublabel | include "cr.flatten_map" -}}
    {{- else -}}
- name: {{ $sublabel | quote }}
  value: {{ $val | quote }}
  {{- end -}}
{{- end -}}
{{- end -}}

################################################################################
## debug ###
################################################################################

{{- define "cr.dump" }}
  {{- . | printf "\nThe output of the dumped var is: \n%s" | fail }}
{{- end }}

{{- define "cr.dumpJson" }}
  {{- . | toPrettyJson | printf "\nThe JSON output of the dumped var is: \n%s" | fail }}
{{- end }}

{{- define "cr.dumpList" }}

{{- $debug := "" }}
{{- range ( get ( ( printf "list:\n %s" . ) | fromYaml ) "list" ) }}
{{- $debug = printf "%s\n%s" $debug . }}
{{- end }}
{{- template "cr.dump" $debug }}

{{- end }}

