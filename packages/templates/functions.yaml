
################################################################################
## cr.list_package_with_deps ###
################################################################################

{{- define "cr.list_package_with_deps" }} 

{{- if not (default .skip false) }}

{{- $packages := list }}

{{- $dep := . }}

{{- range ("prerequires optrequires requires" | splitList " ") }}
{{- if ( index $dep . ) }}
{{- range ( index $dep . ) }}

{{- $deps := ( include "cr.list_package_with_deps" . ) | splitList " " }}
{{- $packages = $packages | concat $deps }}

{{- end }}
{{- end }}
{{- end }}

{{- $package := printf "\"%s-%s\"" .category .name }}
{{- if not (has $package $packages) }}
{{- $packages = $package | append $packages }}
{{- end }}

{{- $packages = $packages | uniq }}
{{- join " " $packages }}

{{- else }}
{{- "" }}
{{- end }}

{{- end }}

################################################################################
## cr.copy_package_setup_files ###
################################################################################

{{- define "cr.copy_package_setup_files" }}
{{- $package := . }}
- |
  set -x; \
  mkdir -p /etc/portage/package.accept_keywords; \
  if [ -e "package.accept_keywords/{{ $package }}.accept_keywords" ]; then \
    cp -rf package.accept_keywords/{{ $package }}.accept_keywords /etc/portage/package.accept_keywords/{{ $package }}.accept_keywords; \
  fi; \
  mkdir -p /etc/portage/package.license; \
  if [ -e "package.license/{{ $package }}.license" ]; then \
    cp -rf package.license/{{ $package }}.license /etc/portage/package.license/{{ $package }}.license; \
  fi; \
  mkdir -p /etc/portage/package.unmask; \
  if [ -e "package.unmask/{{ $package }}.unmask" ]; then \
    cp -rf package.unmask/{{ $package }}.unmask /etc/portage/package.unmask/{{ $package }}.unmask; \
  fi; \
  mkdir -p /etc/portage/package.use; \
  if [ -e "package.use/{{ $package }}.use" ]; then \
    cp -rf package.use/{{ $package }}.use /etc/portage/package.use/{{ $package }}.use; \
  fi;
{{- end }}

################################################################################
## cr.packages_setup ###
################################################################################

{{- define "cr.packages_setup" }}

{{- if not (default .skip false) }}

{{- $dep := . }}

{{- range ("prerequires optrequires requires" | splitList " ") }}
{{- if ( index $dep . ) }}
{{- range ( index $dep . ) }}

{{- ( include "cr.packages_setup" . ) }}

{{- end }}
{{- end }}
{{- end }}

{{- ( include "cr.package_setup" . ) }}

{{- end }}

{{- end }}

################################################################################
## cr.package_setup ###
################################################################################

{{- define "cr.package_setup" }}
{{- $package := . }}

{{- $filepath := "/etc/portage/package" }}
{{- $filename := printf "%s-%s" .category .name }}

{{- if .atoms }}
- |
{{- range .atoms }}
{{- $atom := . }}
{{- range ("accept_keywords license use" | splitList " ") }}
{{- $value := (index $atom .) }}
{{- if $value }}
  mkdir -p {{ $filepath }}.{{ . }}; \
  echo -e "{{ $atom.atom }} {{ ($value | replace "\n" "\\n") }}" >> {{ $filepath }}.{{ . }}/{{ $filename }}.{{ . }}; \
{{- end }}
{{- end }}
{{- range ("unmask" | splitList " ") }}
{{- if (index $atom .) }}
  mkdir -p {{ $filepath }}.{{ . }}; \
  echo -e "{{ $atom.atom }} >> {{ $filepath }}.{{ . }}/{{ $filename }}.{{ . }}; \
{{- end }}
{{- end }}
{{- $value := (index $atom "env") }}
{{- if $value }}
  mkdir -p /etc/portage/env; \
  echo -e "{{ ($value | replace "\n" "\\n" | replace "$" "\\$" | replace "\"" "\\\"" ) }}" >> /etc/portage/env/{{ $filename }}.conf; \
  echo -e "{{ $atom.atom }} {{ $filename }}.conf" >> /etc/portage/package.env/{{ $filename }}.env; \
{{- end }}
{{- $value := (index $atom "env_profile" ) }}
{{- if $value }}
  mkdir -p /etc/portage/env; \
  echo -e "{{ $atom.atom }} {{ $value }}" >> /etc/portage/package.env/{{ $filename }}.env; \
{{- end }}

{{- end }}
  echo;
{{- end }}

{{- end }}

################################################################################
## cr.prereqs ###
################################################################################

{{- define "cr.prereqs" }}

{{- $commands := list }}

{{- if not (default .skip false) }}

{{- $command := "" }}

{{- if .overlays }}
{{- $command := printf "USE=\"-subversion -mercurial\" emerge app-portage/layman" }}
{{- if not (has $command $commands) }}
{{- $commands = append $commands $command }}
{{- end }}
{{- $command := printf "layman -L" }}
{{- if not (has $command $commands) }}
{{- $commands = append $commands $command }}
{{- end }}
{{- range .overlays }}
{{- if .url }}
{{- $command = printf "echo \"y\" | layman -o %s -f -a %s" .url .name }}
{{- else }}
{{- $command = printf "echo \"y\" | layman -a %s" .name }}
{{- end }}
{{- if not (has $command $commands) }}
{{- $commands = append $commands $command }}
{{- end }}
{{- end }}
{{- end }}

{{- if .prepare }}
{{- range .prepare }}
{{- if . }}
{{- if not (has . $commands) }}
{{- $commands = append $commands . }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- if .prereqs }}
{{- range .prereqs }}
{{- $command := include "cr.emerge" . }}
{{- if $command }}
{{- if not (has $command $commands) }}
{{- $commands = append $commands $command }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- $dep := . }}

{{- range ("prerequires optrequires" | splitList " ") }}
{{- if ( index $dep . ) }}
{{- range ( index $dep . ) }}

{{- range include "cr.prereqs_emerge" . | fromJsonArray }}
{{- if . }}
{{- if not (has . $commands) }}
{{- $commands = append $commands . }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}
{{- end }}
{{- end }}

{{- if .requires }}
{{- range .requires }}

{{- range include "cr.prereqs_emerge" . | fromJsonArray }}
{{- if . }}
{{- if not (has . $commands) }}
{{- $commands = append $commands . }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}
{{- end }}

{{- if .ready }}
{{- range .ready }}
{{- if . }}
{{- if not (has . $commands) }}
{{- $commands = append $commands . }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}

{{- $commands | toJson }}

{{- end }}

################################################################################
## cr.emerge ###
################################################################################

{{- define "cr.emerge" }}

{{- $command := "" }}

{{- $tokens := . | splitList ";" }}
{{- if eq (len $tokens) 1 }}
{{- $command = printf "emerge -1 -j ${JOBS} %s" (printf "\"%s\"" ((index $tokens 0) | replace " " "\" \"")) }}
{{- else if eq (len $tokens) 2 }}
{{- $command = printf "%s emerge -1 -j ${JOBS} %s" (index $tokens 1) (printf "\"%s\"" ((index $tokens 0) | replace " " "\" \"")) }}
{{- end }}

{{- $command }}

{{- end }}

################################################################################
## cr.prereqs_emerge ###
################################################################################

{{- define "cr.prereqs_emerge" }} 

{{- $commands := list }}

{{- if not (default .skip false) }}

{{- $command := "" }}

{{- range include "cr.prereqs" . | fromJsonArray }}
{{- if . }}
{{- if not (has . $commands) }}
{{- $commands = append $commands . }}
{{- end }}
{{- end }}
{{- end }}

{{- if .setup }}
{{- range .setup }}
{{- if . }}
{{- if not (has . $commands) }}
{{- $commands = append $commands . }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- if .preemerge }}
{{- range .preemerge }}
{{- $command := include "cr.emerge" . }}
{{- if $command }}
{{- if not (has $command $commands) }}
{{- $commands = append $commands $command }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- if .labels }}
{{- if ( index .labels "emerge.packages" ) }}
{{- $command := include "cr.emerge" ( index .labels "emerge.packages" ) }}
{{- if $command }}
{{- if not (has $command $commands) }}
{{- $commands = append $commands $command }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{ if .unmerge }}
{{ range .unmerge }}
- emerge -C {{ . }}
{{ end }}
{{ end }}
{{ if .etc_update }}
{{ if .etc_update.mode }}
- etc-update -q --automode {{ .etc_update.mode }}
{{ end }}
{{ end }}

{{- if .completion }}
{{- range .completion }}
{{- if . }}
{{- if not (has . $commands) }}
{{- $commands = append $commands . }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}

{{- $commands | toJson }}

{{- end }}

################################################################################
## flatten ###
################################################################################

{{- define "cr.flatten_list" -}}
  {{- $output := list -}}
  {{- range . -}}
    {{- if (kindIs "slice" . ) -}}
      {{- $output = (concat $output ( get (fromYaml (include "cr.flatten_list" . ) )  "list" ) ) -}}
    {{- else -}}
      {{- $output = (append $output . ) -}}
    {{- end -}}
  {{- end -}}
  {{- toYaml (dict "list" $output) -}}
{{- end -}}

{{- define "cr.flatten" -}}
  {{- get ( fromYaml (include "cr.flatten_list" . ) ) "list"  | toYaml }}
{{- end -}}

{{- define "cr.flatten_map" -}}
  {{- $map := first . -}}
  {{- $label := last . -}}
  {{- range $key, $val := $map -}}
    {{- $sublabel := list $label $key | join "_" | upper -}}
    {{- if kindOf $val | eq "map" -}}
      {{- list $val $sublabel | include "cr.flatten_map" -}}
    {{- else -}}
- name: {{ $sublabel | quote }}
  value: {{ $val | quote }}
  {{- end -}}
{{- end -}}
{{- end -}}

################################################################################
## debug ###
################################################################################

{{- define "cr.dump" }}
{{- . | printf "\nThe output of the dumped var is: \n%s" | fail }}
{{- end }}

{{- define "cr.dumpJson" }}
{{- . | toPrettyJson | printf "\nThe JSON output of the dumped var is: \n%s" | fail }}
{{- end }}
